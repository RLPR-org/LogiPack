version: "3"
services:
  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    image: logipack-frontend:latest
    container_name: logipack-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=test1234
      - POSTGRES_USER=postgres
      - POSTGRES_DB=logipack
    networks:
      - logipack-net

  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    image: logipack-backend:latest
    container_name: logipack-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/logipack
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=test1234
    networks:
      - logipack-net
    depends_on:
      - postgres

  rabbitmq:
    container_name: "rabbitmq"
    image: rabbitmq:3.8-management-alpine
    ports:
        # AMQP protocol port
        - '5672:5672'
        # HTTP management UI
        - '15672:15672'
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:15672"]
        interval: 30s
        timeout: 10s
        retries: 10
    networks:
      - logipack-net

  datagen:
    build:
      context: data_gen
      dockerfile: Dockerfile
    image: logipack-datagen:latest
    container_name: logipack-datagen
    environment:
      - HOSTNAMERABBIT=localhost
    depends_on:
      - rabbitmq
    networks:
      - logipack-net

volumes:
  - postgres-data:/var/lib/postgresql/data

networks:
  logipack-net:
    driver: bridge